name: 'Configure Deployment Environment'
description: 'Set and export environment variables needed to deploy to AWS based on branch name'
inputs:
  branch:
    description: 'name of the branch, pass in GITHUB_REF'
    required: true
  application:
    description: 'application this repo belongs to for finidng the namespace to deploy to'
    required: true
  variables:
    description: 'Vars as JSON'
    required: true    
  secrets:
    description: 'secrets as JSON'
    required: true 
  valuesFile:
    description: 'values file location'
    required: false    
runs:
  using: "composite"
  steps:
    - name: Get Environmnet From Branch
      shell: bash
      run: |
        echo "BRANCH=$(echo ${{ inputs.branch }} | cut -d'/' -f 3)"
        BRANCH=$(echo ${{ inputs.branch }} | cut -d'/' -f 3)
        if [[ ${BRANCH,,} == 'master' || ${BRANCH,,} == 'main' ]]; then
            echo "AWS_ENV=PROD" >> $GITHUB_ENV
        elif [[ ${BRANCH,,} == 'development' || ${BRANCH,,} == 'develop' ]]; then
            echo "AWS_ENV=DEV" >> $GITHUB_ENV
        else
            echo "AWS_ENV=FEATURE" >> $GITHUB_ENV
        fi      

    - name: check env context
      shell: bash
      env:
        VARIABLES: ${{ inputs.variables }}  
        APPLICATION: ${{ inputs.APPLICATION }}
      run: |
        echo "variables:"
        echo "$VARIABLES"
        echo "APPLICATION_NAME=$(echo ${APPLICATION@U})" >> "$GITHUB_ENV"
        
    - name: Configure Environment
      shell: bash
      env:
        APPLICATION: ${{ inputs.application }}  
        VARIABLES: ${{ inputs.variables }}
        SECRETS: ${{ inputs.secrets }}
      run: |
        REGION_VARIABLE=$(echo ${{ format('{0}_AWS_REGION', env.AWS_ENV) }})
        REGION_VALUE=$( echo $VARIABLES | jq -r ".$REGION_VARIABLE" )
        echo "AWS_REGION=$(echo $REGION_VALUE)" >> "$GITHUB_ENV"
        
        ACCESS_KEY_ID_VARIABLE=$(echo ${{ format('{0}_AWS_ACCESS_KEY_ID', env.AWS_ENV) }})
        ACCESS_KEY_ID_VALUE=$( echo $SECRETS | jq -r ".$ACCESS_KEY_ID_VARIABLE" )
        echo "AWS_ACCESS_KEY_ID=$(echo $ACCESS_KEY_ID_VALUE)" >> "$GITHUB_ENV"

        SECRET_ACCESS_KEY_VARIABLE=$(echo ${{ format('{0}_AWS_SECRET_ACCESS_KEY', env.AWS_ENV) }})
        SECRET_ACCESS_KEY_VALUE=$( echo $SECRETS | jq -r ".$SECRET_ACCESS_KEY_VARIABLE" )
        echo "AWS_SECRET_ACCESS_KEY=$(echo $SECRET_ACCESS_KEY_VALUE)" >> "$GITHUB_ENV"        

        NAMESPACE_VARIABLE=$(echo ${{ format('{0}_{1}_NAMESPACE', env.AWS_ENV, env.APPLICATION_NAME) }})
        NAMESPACE_VALUE=$( echo $VARIABLES | jq -r ".$NAMESPACE_VARIABLE" )
        echo "NAMESPACE=$(echo $NAMESPACE_VALUE)" >> "$GITHUB_ENV" 

        CODEBUILD_PROJECT_VARIABLE=$(echo ${{ format('{0}_CODEBUILD_PROJECT', env.AWS_ENV) }})
        CODEBUILD_PROJECT_VALUE=$( echo $VARIABLES | jq -r ".$CODEBUILD_PROJECT_VARIABLE" )
        echo "CODEBUILD_PROJECT=$(echo $CODEBUILD_PROJECT_VALUE)" >> "$GITHUB_ENV"

        HOSTNAME_VARIABLE=$(echo ${{ format('{0}_{1}_HOSTNAME', env.AWS_ENV, env.APPLICATION_NAME) }})
        HOSTNAME_VALUE=$( echo $VARIABLES | jq -r ".$HOSTNAME_VARIABLE" )
        echo "HOSTNAME=$(echo $HOSTNAME_VALUE)" >> "$GITHUB_ENV"   

        INGRESS_CLASS_VARIABLE=$(echo ${{ format('{0}_{1}_INGRESS_CLASS', env.AWS_ENV, env.APPLICATION_NAME) }})
        INGRESS_CLASS_VALUE=$( echo $VARIABLES | jq -r ".$INGRESS_CLASS_VARIABLE" )
        echo "INGRESS_CLASS=$(echo $INGRESS_CLASS_VALUE)" >> "$GITHUB_ENV"   
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1   

    - name: Output ECR Registry
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "ECR_REGISTRY=$(echo $ECR_REGISTRY)" >> "$GITHUB_ENV"        

    - name: Set env vars from vars context JSON 
      shell: bash
      env: 
        VARIABLES: ${{ inputs.variables }}
        SECRETS: ${{ inputs.secrets }}    
      run: |
        echo "$VARIABLES" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        echo "$SECRETS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

    - name: Substitue variables in values file
      shell: bash
      env:
        file: ${{ inputs.valuesFile }} 
      run: |
        envsubst < $file  > tempValues.yaml

    - name: convert values file to json    
      uses: fabasoad/data-format-converter-action@v0
      id: yaml2json
      with:
        input: tempValues.yaml
        from: "yaml"
        to: "json"    

    - name: Output Values file
      shell: bash
      env:
        VALUES_FILE_OUTPUT: ${{ steps.yaml2json.outputs.output }}  
      run: |       
        echo "VALUES_FILE=$(echo $VALUES_FILE_OUTPUT)" >> "$GITHUB_ENV"

